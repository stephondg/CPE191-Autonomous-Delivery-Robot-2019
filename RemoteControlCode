//Controlling arduino motors using ROS Twist keyboard and viewing Ultrasonic Range Data in a plot.
//rosrun rosserial_python serial_node.py /dev/ttyUSB0
//rosrun teleop_twist_keyboard teleop_twist_keyboard.py
#define AIN1 5
#define AIN2 4
#define BIN1 7
#define BIN2 8
#define PWMA 6
#define PWMB 9

#if defined(ARDUINO) && ARDUINO >= 100
#include "Arduino.h"
#else
#include <WProgram.h>
#endif
#include <stdlib.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/String.h>
#include <ros/time.h>
#include <sensor_msgs/Range.h>
#include <tf/transform_broadcaster.h>
#define USE_USBCON

int flag = 0;
ros::NodeHandle  nh;

sensor_msgs::Range range_msg;
geometry_msgs::Twist msg;


float move1;
float move2;

ros::Publisher pub_range( "/ultrasound", &range_msg);

int pingPin = 12;
int inPin = 13;
int ledPin = 11;
long range_time;
char frameid[] = "/ultrasound";


void callback(const geometry_msgs::Twist& cmd_vel)
{
  move1 = cmd_vel.linear.x;
  move2 = cmd_vel.angular.z;
  if (move1 > 0 && move2 == 0)
  {
	flag = 1;
	front();
	delay(1);
  }
  else if (move1 > 0 && move2 > 0 )
  {
	flag = 2;
	left();
	delay(10);
  }
  else if (move1 > 0 && move2 < 0 )
  {
	flag = 3;
	right();
	delay(10);
  }
  else if (move1 < 0)
  {
	flag = 4;
	back();
	delay(10);
  }
  else
  {
	flag = 5;
	die();
  }
}
ros::Subscriber <geometry_msgs::Twist> sub("/cmd_vel", callback);

const int rightforw = 7;
const int leftback = 5;
const int leftforw = 4;
const int rightback = 8;
const int pwma = 6;
const int pwmb = 9;
int interrupt = 2;

void setup() {
  nh.initNode();
  nh.advertise(pub_range);
  nh.subscribe(sub);
  range_msg.radiation_type = sensor_msgs::Range::ULTRASOUND;
  range_msg.header.frame_id =  frameid;
  range_msg.field_of_view = 0.1;  // fake
  range_msg.min_range = 0.0;
  range_msg.max_range = 4.47;
  pinMode(leftforw, OUTPUT);
  pinMode(leftback, OUTPUT);
  pinMode(rightforw, OUTPUT);
  pinMode(rightback, OUTPUT);
  pinMode(pwma, OUTPUT);
  pinMode(pwmb, OUTPUT);

}
ros::Time begin = nh.now();

void loop()
{
  nh.now();
  nh.spinOnce();
  delay(10);
}


void front()
{
	analogWrite(PWMA, 200);
	analogWrite(PWMB, 200);// motor speed
	digitalWrite(AIN1, HIGH);
	digitalWrite(BIN1, HIGH);
	digitalWrite(AIN2, LOW);
	digitalWrite(BIN2, LOW);
	delay(600);
	die();
    
}
void back()
{
	analogWrite(PWMA, 200);
	analogWrite(PWMB, 200);
	digitalWrite(AIN1, LOW);
	digitalWrite(BIN1, LOW);
	digitalWrite(AIN2, HIGH);
	digitalWrite(BIN2, HIGH);
	delay(600);
	die();   
}
void left()
{
	analogWrite(PWMA, 200);
	analogWrite(PWMB, 200);
	digitalWrite(AIN1, LOW);
	digitalWrite(BIN1, HIGH);
	digitalWrite(AIN2, LOW);
	digitalWrite(BIN2, LOW);
	delay(600);
	die();

}
void right()
{
	analogWrite(PWMA, 200);
	analogWrite(PWMB, 200);
	digitalWrite(AIN1, HIGH);
	digitalWrite(BIN1, LOW);
	digitalWrite(AIN2, LOW);
	digitalWrite(BIN2, LOW);
	delay(600);
	die();
}
void die()
{
	analogWrite(PWMA, 0);
	analogWrite(PWMB, 0);
	digitalWrite(AIN1, LOW);
	digitalWrite(BIN1, LOW);
	digitalWrite(AIN2, LOW);
	digitalWrite(BIN2, LOW);
}
