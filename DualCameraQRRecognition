# import the necessary packages
import argparse
import datetime
import imutils
import time
import cv2
import numpy as np
from imutils.video import VideoStream
from pyzbar import pyzbar
import os
import serial
ser = serial.Serial('/dev/ttyAMC0', 57600, timeout=1)
ser.open()
#import RPi.GPIO as GPIO
 
# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-o", "--output", type=str, default="barcodes.csv",help="path to output CSV file containing barcodes")
args = vars(ap.parse_args())

# initialize the video stream and allow the camera sensor to warm up
print("[INFO] starting video stream...")
vs = VideoStream(src=2).start()
vs1 = VideoStream(src=1).start()
#vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)
 
# open the output CSV file for writing and initialize the set of
# barcodes found thus far
csv = open(args["output"], "w")
found = set()

officeNum = "12"
flag = "0"
counter = 0
# loop over the frames from the video stream
while True:
    # grab the frame from the threaded video stream and resize it to
    # have a maximum width of 400 pixels
    frame = vs.read()
    frame = imutils.resize(frame, width=400)
    frame1 = vs1.read()
    frame1 = imutils.resize(frame1, width=400)
 
    # find the barcodes in the frame and decode each of the barcodes
    barcodes = pyzbar.decode(frame)
    
# loop over the detected barcodes
    for barcode in barcodes:
   	 # extract the bounding box location of the barcode and draw
   	 # the bounding box surrounding the barcode on the image
   	 (x, y, w, h) = barcode.rect
   	 cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
		 (a, b, c, d) = barcode.rect
   	 cv2.rectangle(frame1, (a, b), (a + c, b + d), (0, 0, 255), 2)
   	 # the barcode data is a bytes object so if we want to draw it
   	 # on our output image we need to convert it to a string first
   	 barcodeData = barcode.data.decode("utf-8")
   	 barcodeType = barcode.type
   	 #barcodeData1 = barcode.data.decode("utf-8")
   	 #barcodeType1 = barcode.type
   	 counter = counter % 5
   	 if barcodeData == officeNum:
                    	flag = "1"
                    	print("Value has been found")
   	 if barcodeData > officeNum and counter == 0:
   		 print("Please turn around")
   	 if barcodeData < officeNum and counter == 0:
   		 print("Please speedup!")
            	#print(barcodeData)
   	 # draw the barcode data and barcode type on the image
   	 text = "{} ({})".format(barcodeData, barcodeType)
   	 cv2.putText(frame, text, (x, y - 10),
   		 cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
   	 if flag == "1":
                    	break
   	 # if the barcode text is currently not in our CSV file, write
   	 # the timestamp + barcode to disk and update the set
   	 if barcodeData not in found:
   		 csv.write("{},{}\n".format(datetime.datetime.now(),
   			 barcodeData))
   		 csv.flush()
   		 found.add(barcodeData)
    barcodes = pyzbar.decode(frame1)
# loop over the detected barcodes
    for barcode in barcodes:
   	 # extract the bounding box location of the barcode and draw
   	 # the bounding box surrounding the barcode on the image
		 (a, b, c, d) = barcode.rect
   	 cv2.rectangle(frame1, (a, b), (a + c, b + d), (0, 0, 255), 2)
   	 # the barcode data is a bytes object so if we want to draw it
   	 # on our output image we need to convert it to a string first
   	 barcodeData1 = barcode.data.decode("utf-8")
   	 barcodeType1 = barcode.type
   	 #barcodeData1 = barcode.data.decode("utf-8")
   	 #barcodeType1 = barcode.type
   	 counter = counter % 5
   	 if barcodeData1 == officeNum:
                    	flag = "1"
                    	print("Value has been found")
   	 # draw the barcode data and barcode type on the image
   	 text = "{} ({})".format(barcodeData1, barcodeType1)
   	 cv2.putText(frame1, text, (a, b - 10),
   		 cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
   	 if flag == "1":
                    	break
   	 # if the barcode text is currently not in our CSV file, write
   	 # the timestamp + barcode to disk and update the set
   	 if barcodeData1 not in found:
   		 csv.write("{},{}\n".format(datetime.datetime.now(),
   			 barcodeData1))
   		 csv.flush()
   		 found.add(barcodeData1)
    if flag == "1":
            	break
    counter = counter + 1
# show the output frame
    cv2.imshow("Barcode Scanner", frame)
    key = cv2.waitKey(1) & 0xFF
 
    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
   	 break
 
# close the output CSV file do a bit of cleanup
print("[INFO] cleaning up...")
csv.close()
cv2.destroyAllWindows()
vs.stop()
vs1.stop()
